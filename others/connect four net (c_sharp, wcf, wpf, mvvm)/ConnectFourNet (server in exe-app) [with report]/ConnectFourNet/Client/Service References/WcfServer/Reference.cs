//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConnectNNet.Client.WcfServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSession", Namespace="http://schemas.datacontract.org/2004/07/ConnectNNet.Server.Models")]
    [System.SerializableAttribute()]
    public partial class GameSession : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectNNet.GameCore.GameLogic GameInstanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectNNet.Client.WcfServer.GameState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectNNet.GameCore.GameLogic GameInstance {
            get {
                return this.GameInstanceField;
            }
            set {
                if ((object.ReferenceEquals(this.GameInstanceField, value) != true)) {
                    this.GameInstanceField = value;
                    this.RaisePropertyChanged("GameInstance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectNNet.Client.WcfServer.GameState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameState", Namespace="http://schemas.datacontract.org/2004/07/ConnectNNet.Server.Models")]
    public enum GameState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Starting = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Closed = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerATurn = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerBTurn = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Tie = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerAVin = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayerBVin = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotUpdated = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Restart = 9,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServer.IServer")]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/Start", ReplyAction="http://tempuri.org/IServer/StartResponse")]
        System.Guid Start(ConnectNNet.Client.WcfServer.GameSession gameState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/ReStart", ReplyAction="http://tempuri.org/IServer/ReStartResponse")]
        void ReStart(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/Stop", ReplyAction="http://tempuri.org/IServer/StopResponse")]
        void Stop(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetGameSession", ReplyAction="http://tempuri.org/IServer/GetGameSessionResponse")]
        ConnectNNet.Client.WcfServer.GameSession GetGameSession(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetState", ReplyAction="http://tempuri.org/IServer/GetStateResponse")]
        ConnectNNet.Client.WcfServer.GameState GetState(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/Turn", ReplyAction="http://tempuri.org/IServer/TurnResponse")]
        bool Turn(System.Guid gameId, System.Guid playerId, System.Drawing.Point cellPoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetDownPos", ReplyAction="http://tempuri.org/IServer/GetDownPosResponse")]
        System.Nullable<System.Drawing.Point> GetDownPos(System.Guid gameId, System.Drawing.Point cellPos);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : ConnectNNet.Client.WcfServer.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<ConnectNNet.Client.WcfServer.IServer>, ConnectNNet.Client.WcfServer.IServer {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid Start(ConnectNNet.Client.WcfServer.GameSession gameState) {
            return base.Channel.Start(gameState);
        }
        
        public void ReStart(System.Guid gameId, System.Guid playerId) {
            base.Channel.ReStart(gameId, playerId);
        }
        
        public void Stop(System.Guid gameId, System.Guid playerId) {
            base.Channel.Stop(gameId, playerId);
        }
        
        public ConnectNNet.Client.WcfServer.GameSession GetGameSession(System.Guid gameId, System.Guid playerId) {
            return base.Channel.GetGameSession(gameId, playerId);
        }
        
        public ConnectNNet.Client.WcfServer.GameState GetState(System.Guid gameId, System.Guid playerId) {
            return base.Channel.GetState(gameId, playerId);
        }
        
        public bool Turn(System.Guid gameId, System.Guid playerId, System.Drawing.Point cellPoint) {
            return base.Channel.Turn(gameId, playerId, cellPoint);
        }
        
        public System.Nullable<System.Drawing.Point> GetDownPos(System.Guid gameId, System.Drawing.Point cellPos) {
            return base.Channel.GetDownPos(gameId, cellPos);
        }
    }
}
